# workflows/test-pg_analytics.yml
#
# Test pg_analytics
# Run unit and integration tests for the pg_analytics extension.

name: Test pg_analytics

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - dev
      - main
    paths:
      - ".github/workflows/test-pg_analytics.yml"
      - "src/**"
      - "tests/**"
      - "Cargo.toml"
      - "pg_analytics.control"
  push:
    branches: # Also run on `dev` and `main` to fill the GitHub Actions Rust cache in a way that PRs can see it
      - dev
      - main
    paths:
      - "**/*.rs"
      - "**/*.toml"
  workflow_dispatch:

concurrency:
  group: test-pg_analytics-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  test-pg_analytics:
    name: Test pg_analytics on PostgreSQL ${{ matrix.pg_version }} for ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        include:
          - runner: ubicloud-standard-16
            pg_version: 13
            arch: amd64
          - runner: ubicloud-standard-16
            pg_version: 14
            arch: amd64
          - runner: ubicloud-standard-16
            pg_version: 15
            arch: amd64
          - runner: ubicloud-standard-16
            pg_version: 16
            arch: amd64
          - runner: ubicloud-standard-16
            pg_version: 17
            arch: amd64
    env:
      default_pg_version: 17

    steps:
      # For the Rust cache to get filled, we need to run the CI on the dev branch after every merge. This only
      # needs to happen once, so we skip the workflow for all but one of the matrix jobs in that case.
      - name: Check if Skipping
        id: check_skip
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ matrix.pg_version }}" != "${{ env.default_pg_version }}" ]]; then
            echo "This is a push event to fill Rust cache. Skipping this job."
            echo "skip_remaining_steps=true" >> $GITHUB_OUTPUT
          fi

      - name: Checkout Git Repository
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        uses: actions/checkout@v4

      - name: Install Rust
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        uses: dtolnay/rust-toolchain@stable

      # This checks that the version in Cargo.toml is incremented to the next release. We only run it
      # on PRs to main, which are our release promotion PRs.
      - name: Check version in Cargo.toml
        if: steps.check_skip.outputs.skip_remaining_steps != 'true' && github.base_ref == 'main'
        run: |
          CARGO_VERSION=$(grep "^version" Cargo.toml | head -1 | awk -F '"' '{print $2}')
          RELEASE_VERSION="${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_PATCH }}"
          if [ "$CARGO_VERSION" != "$RELEASE_VERSION" ]; then
            echo "Version in Cargo.toml ($CARGO_VERSION) does not match upcoming release version ($RELEASE_VERSION), did you forget to increment it?"
            exit 1
          fi
          echo "Version check passed!"

      - name: Extract pgrx Version
        id: pgrx
        run: echo version=$(cargo tree --depth 1 -i pgrx -p pg_analytics | head -n 1 | cut -f2 -dv) >> $GITHUB_OUTPUT

      # Caches from base branches are available to PRs, but not across unrelated branches, so we only
      # save the cache on the 'dev' branch, but load it on all branches.
      - name: Install Rust Cache
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        uses: ubicloud/rust-cache@v2
        with:
          prefix-key: "v1-rust"
          key: ${{ matrix.pg_version }}-${{ steps.pgrx.outputs.version }}
          cache-targets: true
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/dev' }}

      - name: Install & Configure Supported PostgreSQL Version
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        run: |
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt-get update && sudo apt-get install -y postgresql-${{ matrix.pg_version }} postgresql-server-dev-${{ matrix.pg_version }}
          sudo chown -R $(whoami) /usr/share/postgresql/${{ matrix.pg_version }}/ /usr/lib/postgresql/${{ matrix.pg_version }}/ /var/lib/postgresql/${{ matrix.pg_version }}/
          echo "/usr/lib/postgresql/${{ matrix.pg_version }}/bin" >> $GITHUB_PATH

      - name: Install llvm-tools-preview
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        run: rustup component add llvm-tools-preview

      - name: Install cargo-pgrx
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        run: cargo install -j $(nproc) --locked cargo-pgrx --version ${{ steps.pgrx.outputs.version }} --debug

      - name: Initialize cargo-pgrx environment
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        run: cargo pgrx init "--pg${{ matrix.pg_version }}=/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config"

      - name: Add pg_analytics to shared_preload_libraries
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        working-directory: /home/runner/.pgrx/data-${{ matrix.pg_version }}/
        run: sed -i "s/^#shared_preload_libraries = .*/shared_preload_libraries = 'pg_analytics'/" postgresql.conf

      - name: Compile & install pg_analytics extension
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        run: cargo pgrx install --pg-config="/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config"

      - name: Start Postgres via cargo-pgrx
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        run: RUST_BACKTRACE=1 cargo pgrx start pg${{ matrix.pg_version }}

      # The SHA hash here must exactly match the Image::Tag that is referenced in the
      # testcontainers modules Rust crate for localstack.
      - name: Pull Localstack Image
        run: docker pull localstack/localstack@sha256:73698e485240939490134aadd7e429ac87ff068cd5ad09f5de8ccb76727c13e1

      - name: Run pg_analytics Cargo Test Suite
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        env:
          LLVM_PROFILE_FILE: target/coverage/pg_analytics-%p-%m.profraw
          RUST_BACKTRACE: full
        run: |
          echo ""
          echo "Enabling code coverage..."
          echo -e "\n# Enable code coverage on Linux only, for CI builds\n[target.'cfg(target_os=\"linux\")']\nrustflags = [\"-Cinstrument-coverage\"]" >> .cargo/config.toml
          mkdir -p target/coverage target/coverage-report

          echo ""
          echo "Running Rust tests..."
          export DATABASE_URL=postgresql://localhost:288${{ matrix.pg_version }}/postgres
          export RUST_BACKTRACE=1
          cargo test --package tests --features "pg${{ matrix.pg_version }}" --no-default-features

      - name: Print the Postgres Logs
        if: steps.check_skip.outputs.skip_remaining_steps != 'true' && always()
        run: cat ~/.pgrx/${{ matrix.pg_version}}.log

  test-pg_analytics-pgrx-postgres:
    name: Test pg_analytics on pgrx PostgreSQL ${{ matrix.pg_version }} for ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        include:
          - runner: ubicloud-standard-8
            pg_version: 17
            arch: amd64
    env:
      default_pg_version: 17

    steps:
      # For the Rust cache to get filled, we need to run the CI on the dev branch after every merge. This only
      # needs to happen once, so we skip the workflow for all but one of the matrix jobs in that case.
      - name: Check if Skipping
        id: check_skip
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ matrix.pg_version }}" != "${{ env.default_pg_version }}" ]]; then
            echo "This is a push event to fill Rust cache. Skipping this job."
            echo "skip_remaining_steps=true" >> $GITHUB_OUTPUT
          fi

      - name: Checkout Git Repository
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        uses: actions/checkout@v4

      - name: Install Rust
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        uses: dtolnay/rust-toolchain@stable

      # This checks that the version in Cargo.toml is incremented to the next release. We only run it
      # on PRs to main, which are our release promotion PRs.
      - name: Check version in Cargo.toml
        if: steps.check_skip.outputs.skip_remaining_steps != 'true' && github.base_ref == 'main'
        run: |
          CARGO_VERSION=$(grep "^version" Cargo.toml | head -1 | awk -F '"' '{print $2}')
          RELEASE_VERSION="${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_PATCH }}"
          if [ "$CARGO_VERSION" != "$RELEASE_VERSION" ]; then
            echo "Version in Cargo.toml ($CARGO_VERSION) does not match upcoming release version ($RELEASE_VERSION), did you forget to increment it?"
            exit 1
          fi
          echo "Version check passed!"

      - name: Extract pgrx Version
        id: pgrx
        run: echo version=$(cargo tree --depth 1 -i pgrx -p pg_analytics | head -n 1 | cut -f2 -dv) >> $GITHUB_OUTPUT

      # Caches from base branches are available to PRs, but not across unrelated branches, so we only
      # save the cache on the 'dev' branch, but load it on all branches.
      - name: Install Rust Cache
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        uses: ubicloud/rust-cache@v2
        with:
          prefix-key: "v1-rust"
          key: ${{ matrix.pg_version }}-${{ steps.pgrx.outputs.version }}
          cache-targets: true
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/dev' }}

      - name: Install llvm-tools-preview
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        run: rustup component add llvm-tools-preview

      - name: Install cargo-pgrx
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        run: cargo install -j $(nproc) --locked cargo-pgrx --version ${{ steps.pgrx.outputs.version }} --debug

      - name: Initialize cargo-pgrx environment
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        run: cargo pgrx init "--pg${{ matrix.pg_version }}=download"

      - name: Add pg_analytics to shared_preload_libraries
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        working-directory: /home/runner/.pgrx/data-${{ matrix.pg_version }}/
        run: sed -i "s/^#shared_preload_libraries = .*/shared_preload_libraries = 'pg_analytics'/" postgresql.conf

      - name: Stop Postgres
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        run: cargo pgrx stop all

      - name: Compile & install pg_analytics extension
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        run: cargo pgrx install --pg-config ~/.pgrx/${{ matrix.pg_version }}.*/pgrx-install/bin/pg_config --features=pg${{ matrix.pg_version }}

      - name: Start Postgres and Create Database
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        run: |
          RUST_BACKTRACE=1 cargo pgrx start pg${{ matrix.pg_version }}
          ~/.pgrx/${{ matrix.pg_version }}.*/pgrx-install/bin/createdb -p 288${{ matrix.pg_version }} -h localhost pg_analytics

      # The SHA hash here must exactly match the Image::Tag that is referenced in the
      # testcontainers modules Rust crate for localstack.
      - name: Pull Localstack Image
        run: docker pull localstack/localstack@sha256:73698e485240939490134aadd7e429ac87ff068cd5ad09f5de8ccb76727c13e1

      - name: Run pg_analytics Cargo Test Suite
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        env:
          LLVM_PROFILE_FILE: target/coverage/pg_analytics-%p-%m.profraw
          RUST_BACKTRACE: full
        run: |
          echo ""
          echo "Enabling code coverage..."
          echo -e "\n# Enable code coverage on Linux only, for CI builds\n[target.'cfg(target_os=\"linux\")']\nrustflags = [\"-Cinstrument-coverage\"]" >> .cargo/config.toml
          mkdir -p target/coverage target/coverage-report

          echo ""
          echo "Running Rust tests..."
          export DATABASE_URL=postgresql://localhost:288${{ matrix.pg_version }}/postgres
          export RUST_BACKTRACE=1
          cargo test --package tests --features "pg${{ matrix.pg_version }}" --no-default-features

      - name: Print the Postgres Logs
        if: steps.check_skip.outputs.skip_remaining_steps != 'true' && always()
        run: cat ~/.pgrx/${{ matrix.pg_version}}.log
